using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Company
{
    public partial class FormContactManagement : Form
    {
        private int _companyId;
        private int _contactId;

        public FormContactManagement(int companyId)
        {
            InitializeComponent();
            _companyId = companyId;
            LoadContactsAsync();
        }

        private void FormContactManagement_Load(object sender, EventArgs e)
        {
            LoadContactsAsync();
        }

        private void btnSearch_Click(object sender, EventArgs e)
        {
            string searchText = txtSearch.Text;
            SearchContactsAsync(searchText);
        }

        private void btnDeleteContact_Click(object sender, EventArgs e)
        {
            if (dataGridViewContacts.SelectedRows.Count > 0)
            {
                int contactId = Convert.ToInt32(dataGridViewContacts.SelectedRows[0].Cells["ContactID"].Value);
            }
            else
            {
                MessageBox.Show("Please select a contact to delete.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        public async Task LoadContactsAsync()
        {
            try
            {
                string query = @"SELECT ContactID, FirstName, LastName, Telephone, Email 
                         FROM Contact 
                         WHERE IsActive = 1 AND CompanyID = @CompanyID";
                var parameters = new[] { new SqlParameter("@CompanyID", _companyId) };
                DataTable contacts = await DatabaseHelper.ExecuteQueryAsync(query, parameters);
                dataGridViewContacts.DataSource = contacts;

                AddEditDeleteButtons(dataGridViewContacts);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading contact: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void AddEditDeleteButtons(DataGridView dataGridViewContacts)
        {
            string iconsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Assets");
            string editIconPath = Path.Combine(iconsPath, "edit.png");
            string deleteIconPath = Path.Combine(iconsPath, "bin.png");
            string actionIconPath = Path.Combine(iconsPath, "actions.png");

            dataGridViewContacts.Columns["ContactID"].Width = 70;
            dataGridViewContacts.Columns["FirstName"].Width = 125;
            dataGridViewContacts.Columns["LastName"].Width = 125;
            dataGridViewContacts.Columns["Telephone"].Width = 125;
            dataGridViewContacts.Columns["Email"].Width = 125;

            if (!dataGridViewContacts.Columns.Contains("Actions"))
            {
                DataGridViewImageColumn actionsColumn = new DataGridViewImageColumn
                {
                    Name = "Actions",
                    HeaderText = "Actions",
                    Image = Image.FromFile(actionIconPath),
                    ToolTipText = "Click for actions",
                    Width = 50
                };
                dataGridViewContacts.Columns.Add(actionsColumn);
            }

            dataGridViewContacts.CellContentClick += (sender, e) =>
            {
                if (e.RowIndex >= 0 && e.ColumnIndex == dataGridViewContacts.Columns["Actions"].Index)
                {
                    ContextMenuStrip contextMenuStrip = new ContextMenuStrip();
                    ToolStripMenuItem editToolStripMenuItem = new ToolStripMenuItem("Edit");
                    ToolStripMenuItem deleteToolStripMenuItem = new ToolStripMenuItem("Delete");

                    try
                    {
                        editToolStripMenuItem.Image = Image.FromFile(editIconPath);
                        deleteToolStripMenuItem.Image = Image.FromFile(deleteIconPath);
                    }
                    catch (FileNotFoundException ex)
                    {
                        MessageBox.Show($"Error loading icons: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }

                    editToolStripMenuItem.Click += (sender1, e1) =>
                    {
                        int contactId = Convert.ToInt32(dataGridViewContacts.Rows[e.RowIndex].Cells["ContactID"].Value);
                        EditContactAsync(contactId);
                    };

                    deleteToolStripMenuItem.Click += (sender1, e1) =>
                    {
                        int contactId = Convert.ToInt32(dataGridViewContacts.Rows[e.RowIndex].Cells["ContactID"].Value);
                        DeleteContactAsync(contactId);
                    };

                    contextMenuStrip.Items.Add(editToolStripMenuItem);
                    contextMenuStrip.Items.Add(deleteToolStripMenuItem);

                    contextMenuStrip.Show(dataGridViewContacts, dataGridViewContacts.PointToClient(Cursor.Position));
                }
            };
        }


        private async Task SearchContactsAsync(string searchText)
        {
            try
            {
                string query = @"
                SELECT ContactID, FirstName, LastName, Telephone, Email 
                FROM Contact WHERE IsActive = 1 AND CompanyID = @CompanyID AND (FirstName LIKE @SearchText OR LastName LIKE @SearchText OR Telephone LIKE @SearchText OR Email LIKE @SearchText)";

                var parameters = new[]
                {
                   new SqlParameter("@CompanyID", _companyId),
                   new SqlParameter("@SearchText", $"%{searchText}%")
                };

                DataTable contacts = await DatabaseHelper.ExecuteQueryAsync(query, parameters);

                if (contacts != null && contacts.Rows.Count > 0)
                {
                    dataGridViewContacts.DataSource = contacts;
                }
                else
                {
                    MessageBox.Show("No contacts found matching your search criteria.", "No Results", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error searching contact: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            txtSearch.Text = string.Empty;
            LoadContactsAsync();
        }

        private async Task EditContactAsync(int contactId)
        {
            try
            {
                _contactId = contactId;
                string query = @"SELECT FirstName, LastName, Telephone, Email 
                         FROM Contact 
                         WHERE ContactID = @ContactID AND IsActive = 1";
                var parameters = new[] { new SqlParameter("@ContactID", contactId) };
                DataRow contactRow = (await DatabaseHelper.ExecuteQueryAsync(query, parameters)).Rows.Cast<DataRow>().FirstOrDefault();

                if (contactRow != null)
                {
                    txtFirstName.Text = contactRow["FirstName"].ToString();
                    txtLastName.Text = contactRow["LastName"].ToString();
                    txtPhone.Text = contactRow["Telephone"].ToString();
                    txtEmail.Text = contactRow["Email"].ToString();
                    btnSave.Text = "Update";
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error editing contact: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async Task DeleteContactAsync(int contactId)
        {
            try
            {
                if (MessageBox.Show($"Are you sure you want to delete Contact ID: {contactId}?",
                                    "Confirm Deletion", MessageBoxButtons.YesNo, MessageBoxIcon.Warning) == DialogResult.Yes)
                {
                    string query = @"UPDATE Contact SET IsActive = 0 WHERE ContactID = @ContactID";
                    var parameters = new[] { new SqlParameter("@ContactID", contactId) };

                    await DatabaseHelper.ExecuteNonQueryAsync(query, parameters);
                    await LoadContactsAsync();
                    MessageBox.Show("Contact deleted successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error deleting contact: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private async void btnSave_Click(object sender, EventArgs e)
        {
            try
            {
                string firstName = txtFirstName.Text.Trim();
                string lastName = txtLastName.Text.Trim();
                string phone = txtPhone.Text.Trim();
                string email = txtEmail.Text.Trim();
                string createdBy = "Jag";
                string modifiedBy = "Jag";
                DateTime currentDate = DateTime.Now;

                if (string.IsNullOrWhiteSpace(firstName) || string.IsNullOrWhiteSpace(lastName) ||
                    string.IsNullOrWhiteSpace(phone) || string.IsNullOrWhiteSpace(email))
                {
                    MessageBox.Show("Please fill out all fields.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                string query;
                SqlParameter[] parameters;

                if (_contactId == 0)
                {
                    query = @"INSERT INTO Contact (FirstName, LastName, Telephone, Email, CompanyID, CreatedBy, CreatedOn) 
                      VALUES (@FirstName, @LastName, @Phone, @Email, @CompanyID, @CreatedBy, @CreatedOn)";
                    parameters = new[]
                    {
                        new SqlParameter("@FirstName", firstName),
                        new SqlParameter("@LastName", lastName),
                        new SqlParameter("@Phone", phone),
                        new SqlParameter("@Email", email),
                        new SqlParameter("@CompanyID", _companyId),
                        new SqlParameter("@CreatedBy", createdBy),
                        new SqlParameter("@CreatedOn", currentDate)
                    };

                    await DatabaseHelper.ExecuteNonQueryAsync(query, parameters);
                    MessageBox.Show("Contact saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    query = @"UPDATE Contact 
                      SET FirstName = @FirstName, LastName = @LastName, Telephone = @Phone, Email = @Email, 
                          ModifiedBy = @ModifiedBy, ModifiedOn = @ModifiedOn 
                      WHERE ContactID = @ContactID";
                    parameters = new[]
                    {
                        new SqlParameter("@FirstName", firstName),
                        new SqlParameter("@LastName", lastName),
                        new SqlParameter("@Phone", phone),
                        new SqlParameter("@Email", email),
                        new SqlParameter("@ModifiedBy", modifiedBy),
                        new SqlParameter("@ModifiedOn", currentDate),
                        new SqlParameter("@ContactID", _contactId)
                    };

                    await DatabaseHelper.ExecuteNonQueryAsync(query, parameters);
                    MessageBox.Show("Contact updated successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

                ClearContactFields();
                await LoadContactsAsync();
                ResetSaveButton();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An error occurred while saving the contact: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ClearContactFields()
        {
            txtFirstName.Clear();
            txtLastName.Clear();
            txtPhone.Clear();
            txtEmail.Clear();
        }

        private void ResetSaveButton()
        {
            _contactId = 0;
            btnSave.Text = "Save";
        }
    }
}
