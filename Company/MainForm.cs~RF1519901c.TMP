using System;
using System.Data;
using System.Drawing;
using System.Configuration;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.IO;
using System.Threading.Tasks;


namespace Company
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
            LoadCompaniesAsync();
        }

        private async Task LoadCompaniesAsync()
        {
            try
            {
                string query = "SELECT CompanyID, CompanyName, AddressLine1, AddressLine2, ZipCode, Telephone FROM Company WHERE IsActive = 1";

                DataTable companies = await DatabaseHelper.ExecuteQueryAsync(query);
                dataGridViewCompanies.DataSource = companies;
                AddEditDeleteButtons(dataGridViewCompanies);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An error occurred while loading companies: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        //private void AddEditDeleteButtons(DataGridView dataGridView)
        //{
        //    string viewIconPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Assets", "view.png");
        //    if (!dataGridView.Columns.Contains("btnViewContacts"))
        //    {
        //        DataGridViewImageColumn btnViewContacts = new DataGridViewImageColumn();
        //        btnViewContacts.Name = "btnViewContacts";
        //        btnViewContacts.HeaderText = "Action";
        //        btnViewContacts.Image = Image.FromFile(viewIconPath);
        //        btnViewContacts.ToolTipText = "View";
        //        dataGridView.Columns.Add(btnViewContacts);
        //    }

        //    string editIconPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Assets", "edit.png");
        //    if (!dataGridView.Columns.Contains("btnEdit"))
        //    {
        //        DataGridViewImageColumn btnEdit = new DataGridViewImageColumn();
        //        btnEdit.Name = "btnEdit";
        //        btnEdit.HeaderText = "Action";
        //        btnEdit.Image = Image.FromFile(editIconPath);
        //        btnEdit.ToolTipText = "Edit";
        //        dataGridView.Columns.Add(btnEdit);
        //    }

        //    string deleteIconPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Assets", "bin.png");
        //    if (!dataGridView.Columns.Contains("btnDelete"))
        //    {
        //        DataGridViewImageColumn btnDelete = new DataGridViewImageColumn();
        //        btnDelete.Name = "btnDelete";
        //        btnDelete.HeaderText = "Action";
        //        btnDelete.Image = Image.FromFile(deleteIconPath);
        //        btnDelete.ToolTipText = "Delete";
        //        dataGridView.Columns.Add(btnDelete);
        //    }

        //    dataGridView.CellContentClick += (sender, e) =>
        //    {
        //        var grid = sender as DataGridView;
        //        if (grid != null && e.RowIndex >= 0)
        //        {
        //            if (e.ColumnIndex == grid.Columns["btnEdit"].Index)
        //            {
        //                if (grid == dataGridViewCompanies)
        //                {
        //                    int companyId = Convert.ToInt32(grid.Rows[e.RowIndex].Cells["CompanyID"].Value);
        //                    EditCompany(companyId);
        //                }
        //                else if (grid == dataGridViewContacts)
        //                {
        //                    int contactId = Convert.ToInt32(grid.Rows[e.RowIndex].Cells["ContactID"].Value);
        //                }
        //            }
        //            else if (e.ColumnIndex == grid.Columns["btnDelete"].Index)
        //            {
        //                if (grid == dataGridViewCompanies)
        //                {
        //                    int companyId = Convert.ToInt32(grid.Rows[e.RowIndex].Cells["CompanyID"].Value);
        //                    DeleteCompanyAsync(companyId);
        //                }
        //                else if (grid == dataGridViewContacts)
        //                {
        //                    int contactId = Convert.ToInt32(grid.Rows[e.RowIndex].Cells["ContactID"].Value);
        //                }
        //            }
        //            else if (e.ColumnIndex == grid.Columns["btnViewContacts"].Index && grid == dataGridViewCompanies)
        //            {
        //                int companyId = Convert.ToInt32(grid.Rows[e.RowIndex].Cells["CompanyID"].Value);

        //                FormContactManagement form = new FormContactManagement(companyId);
        //                form.ShowDialog();
        //            }
        //        }
        //    };
        //}

        private void AddEditDeleteButtons(DataGridView dataGridView)
        {
            string iconsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Assets");
            string viewIconPath = Path.Combine(iconsPath, "view.png");
            string editIconPath = Path.Combine(iconsPath, "edit.png");
            string deleteIconPath = Path.Combine(iconsPath, "bin.png");

            dataGridView.Columns["CompanyID"].Width = 70;
            dataGridView.Columns["CompanyName"].Width = 250;
            dataGridView.Columns["AddressLine1"].Width = 350;
            dataGridView.Columns["AddressLine2"].Width = 350;
            dataGridView.Columns["ZipCode"].Width = 100;
            dataGridView.Columns["Telephone"].Width = 150;

            if (!dataGridView.Columns.Contains("btnActions"))
            {
                DataGridViewImageColumn btnActions = new DataGridViewImageColumn();
                btnActions.Name = "btnActions";
                btnActions.HeaderText = "Actions";
                btnActions.Width = 10;
                dataGridView.Columns.Add(btnActions);
            }

            dataGridView.Columns["btnActions"].DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;

            dataGridView.CellContentClick += (sender, e) =>
            {
                var grid = sender as DataGridView;
                if (grid != null && e.RowIndex >= 0)
                {
                    if (e.ColumnIndex == grid.Columns["btnActions"].Index)
                    {
                        ContextMenuStrip contextMenuStrip = new ContextMenuStrip();
                        ToolStripMenuItem viewToolStripMenuItem = new ToolStripMenuItem("View");
                        ToolStripMenuItem editToolStripMenuItem = new ToolStripMenuItem("Edit");
                        ToolStripMenuItem deleteToolStripMenuItem = new ToolStripMenuItem("Delete");
                        

                        editToolStripMenuItem.Image = Image.FromFile(editIconPath);
                        deleteToolStripMenuItem.Image = Image.FromFile(deleteIconPath);
                        viewToolStripMenuItem.Image = Image.FromFile(viewIconPath);

                        editToolStripMenuItem.Click += (sender1, e1) =>
                        {
                            if (grid == dataGridViewCompanies)
                            {
                                int companyId = Convert.ToInt32(grid.Rows[e.RowIndex].Cells["CompanyID"].Value);
                                EditCompany(companyId);
                            }
                        };

                        deleteToolStripMenuItem.Click += (sender1, e1) =>
                        {
                            if (grid == dataGridViewCompanies)
                            {
                                int companyId = Convert.ToInt32(grid.Rows[e.RowIndex].Cells["CompanyID"].Value);
                                DeleteCompanyAsync(companyId);
                            }
                        };

                        viewToolStripMenuItem.Click += (sender1, e1) =>
                        {
                            if (grid == dataGridViewCompanies)
                            {
                                int companyId = Convert.ToInt32(grid.Rows[e.RowIndex].Cells["CompanyID"].Value);
                                FormContactManagement form = new FormContactManagement(companyId);
                                form.ShowDialog();
                            }
                        };

                        contextMenuStrip.Items.Add(editToolStripMenuItem);
                        contextMenuStrip.Items.Add(deleteToolStripMenuItem);
                        contextMenuStrip.Items.Add(viewToolStripMenuItem);

                        contextMenuStrip.Show(grid, grid.PointToClient(Cursor.Position));
                    }
                }
            };
        }

        private void EditCompany(int companyId)
        {
            foreach (Form openForm in Application.OpenForms)
            {
                if (openForm is FormCompany)
                {
                    openForm.Activate();
                    return;
                }
            }

            FormCompany form = new FormCompany(companyId);
            form.ShowDialog();
            LoadCompaniesAsync();
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private async Task DeleteCompanyAsync(int companyId)
        {
            try
            {
                var result = MessageBox.Show(
                    $"Are you sure you want to delete the company with ID: {companyId}? This will also deactivate all associated contacts.",
                    "Confirm Deletion",
                    MessageBoxButtons.YesNo,
                    MessageBoxIcon.Warning);

                if (result != DialogResult.Yes)
                    return;

                string contactQuery = "UPDATE Contact SET IsActive = 0 WHERE CompanyID = @CompanyId";
                string companyQuery = "UPDATE Company SET IsActive = 0 WHERE CompanyID = @CompanyId";

                var parameters = new[]
                {
                    new SqlParameter("@CompanyId", companyId)
                };

                await DatabaseHelper.ExecuteNonQueryAsync(contactQuery, parameters);
                await DatabaseHelper.ExecuteNonQueryAsync(companyQuery, parameters);

                await LoadCompaniesAsync();

                MessageBox.Show("Company and associated contacts were successfully deactivated!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An error occurred while deleting the company: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnAddCompany_Click(object sender, EventArgs e)
        {
            FormCompany form = new FormCompany();
            form.ShowDialog();
            LoadCompaniesAsync();
        }

        private void btnSearch_Click(object sender, EventArgs e)
        {
            string searchText = txtSearch.Text.Trim();
            if (!string.IsNullOrEmpty(searchText))
            {
                SearchCompanies(searchText);
            }
            else
            {
                LoadCompaniesAsync();
            }
        }

        private async void SearchCompanies(string searchText)
        {
            string query = @"
                SELECT CompanyID, CompanyName, AddressLine1, AddressLine2, ZipCode, Telephone 
                FROM Company 
                WHERE IsActive = 1 
                AND (CompanyName LIKE @SearchText OR AddressLine1 LIKE @SearchText OR AddressLine2 LIKE @SearchText 
                OR ZipCode LIKE @SearchText OR Telephone LIKE @SearchText)";

            string connectionString = ConfigurationManager.ConnectionStrings["CompanyDb"].ConnectionString;

            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@SearchText", $"%{searchText}%");
                        await connection.OpenAsync();
                        DataTable companies = new DataTable();

                        using (SqlDataAdapter adapter = new SqlDataAdapter(command))
                        {
                            await Task.Run(() => adapter.Fill(companies));
                        }

                        dataGridViewCompanies.DataSource = companies;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error searching companies: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            txtSearch.Text = string.Empty;
            LoadCompaniesAsync();
        }
    }
}
